{"mappings":"ACAA,6BAA6B;AAC7B,gBAAgB;AAChB,MAAM,EAAS,SAAS,aAAA,CAAc,OAChC,EAAW,SAAS,aAAA,CAAc,SAClC,EAAa,SAAS,aAAA,CAAc,WACpC,EAAc,SAAS,aAAA,CAAc,YACrC,EAAU,SAAS,aAAA,CAAc,uBACjC,EAAU,SAAS,aAAA,CAAc,QACjC,EAAU,SAAS,aAAA,CAAc,QACjC,EAAU,SAAS,aAAA,CAAc,YAEvB,SAAS,aAAA,CAAc,gBACvC,MAAM,EAAO,SAAS,aAAA,CAAc,iBAG9B,EAAM,EAAE,GAAA,CAAI,OAAO,OAAA,CAAQ,CAAC,GAAI,KAAM,CAAE,IAE9C,uBAAuB;AACvB,EAAQ,SAAA,CAAU,MAAA,CAAO,UACzB,MAAM,EAAQ,MAAM,MAAM,qCACpB,CAAA,GAAE,CAAE,CAAE,CAAG,MAAM,EAAM,IAA3B,EAMA,mCAAkC;AAClC,eAAe,EAAe,CAAI,CAAE,CAAI,EACtC,EAAQ,SAAA,CAAU,MAAA,CAAO,UACzB,GAAI,CACF,IAAM,EAAU,MACd,AAAA,CAAA,MAAM,MACJ,CAAC,kFAAkF,EAAE,EAAK,CAAC,EAAE,EAAK,CAAC,CAAA,EAErG,IAJF,GAMM,CAAA,IAAE,CAAG,CAAA,IAAE,CAAG,CAAA,KAAE,CAAI,CAAA,OAAE,CAAM,CAAA,QAAE,CAAO,CAAA,SAAE,CAAQ,CAAE,CAAG,EAAQ,QAA9D,CACM,EAAc,MAAM,MACxB,CAAC,qCAAqC,EAAE,EAAQ,CAAC,EACjD,IAAA,CAAK,AAAA,GAAO,EAAI,IAFlB,IAIM,EAAc,CAAW,CAAC,EAAE,CAAC,IAAA,CAAK,MAAA,EAAU,SAC5C,EAAc,CAAW,CAAC,EAAE,CAAC,KAAA,CAAM,GAAA,EAAO,SAC1C,CAAA,IAAE,CAAG,CAAE,CAAG,CAEhB,CAAA,EAAO,WAAA,CAAc,EACrB,EAAS,WAAA,CAAc,EACvB,EAAW,WAAA,CAAc,EAAS,IAClC,EAAY,WAAA,CAAc,EAC1B,EAAQ,WAAA,CAAc,EACtB,EAAQ,GAAA,CAAM,EAEd,EAAQ,WAAA,CAAc,EAuBxB,EAAI,OAAA,CAAQ,CAtBC,EAAK,EAsBI,CAAE,IACxB,EAAE,SAAA,CAAU,iDAAkD,CAC5D,YACE,yFACJ,GAAG,KAAA,CAAM,GAET,EAAE,MAAA,CAAO,CA5BI,EAAK,EA4BC,EAAE,KAAA,CAAM,EA3B3B,CAAE,MAAO,EAAK,CACZ,MAAM,iCACN,QAAQ,GAAA,CAAI,EACd,QAAU,CACR,EAAQ,SAAA,CAAU,GAAA,CAAI,SACxB,CACF,CAvCI,EACF,EAAe,YAAa,GAE5B,EAAQ,SAAA,CAAU,GAAA,CAAI,UAsCxB,+BAA+B;AAC/B,EAAK,gBAAA,CAAiB,SAAU,AAAA,IAC9B,EAAE,cAAF,GACA,IAAM,EAAQ,SAAS,aAAA,CAAc,kBAAkB,KAAvD,CACI,WAAW,IAAA,CAAK,GAClB,EAAe,YAAa,GAE5B,EAAe,SAAU,EAE7B,E,4D","sources":["<anon>","src/script/index.js"],"sourcesContent":["var $06e535a9183db766$exports = {};\n// console.log(iconLocation);\n// App Variables\nconst $06e535a9183db766$var$ipText = document.querySelector(\"#ip\");\nconst $06e535a9183db766$var$cityText = document.querySelector(\"#city\");\nconst $06e535a9183db766$var$regionText = document.querySelector(\"#region\");\nconst $06e535a9183db766$var$countryText = document.querySelector(\"#country\");\nconst $06e535a9183db766$var$flagImg = document.querySelector(\".result__flag-image\");\nconst $06e535a9183db766$var$ispText = document.querySelector(\".isp\");\nconst $06e535a9183db766$var$utcText = document.querySelector(\".utc\");\nconst $06e535a9183db766$var$spinner = document.querySelector(\".spinner\");\nconst $06e535a9183db766$var$formBtn = document.querySelector(\".header__btn\");\nconst $06e535a9183db766$var$form = document.querySelector(\".header__form\");\n// Map variables\nconst $06e535a9183db766$var$map = L.map(\"map\").setView([\n    51,\n    -0.09\n], 18);\n// Get Local IP Address\n$06e535a9183db766$var$spinner.classList.remove(\"hidden\");\nconst $06e535a9183db766$var$resIp = await fetch(`https://api.ipify.org?format=json`);\nconst { ip: $06e535a9183db766$var$ip } = await $06e535a9183db766$var$resIp.json();\nif ($06e535a9183db766$var$ip) $06e535a9183db766$var$renderLocation(\"ipAddress\", $06e535a9183db766$var$ip);\nelse $06e535a9183db766$var$spinner.classList.add(\"hidden\");\n// Get IP, Location, Timezone, ISP\nasync function $06e535a9183db766$var$renderLocation(type, data) {\n    $06e535a9183db766$var$spinner.classList.remove(\"hidden\");\n    try {\n        const dataRes = await (await fetch(`https://geo.ipify.org/api/v2/country,city?apiKey=at_pMCkCpy23Goiw8MsZZYF588QVkRuK&${type}=${data}`)).json();\n        const { lat: lat, lng: lng, city: city, region: region, country: country, timezone: timezone } = dataRes.location;\n        const countryData = await fetch(`https://restcountries.com/v3.1/alpha/${country}`).then((res)=>res.json());\n        const countryName = countryData[0].name.common || \"Unkown\";\n        const countryFlag = countryData[0].flags.png || \"Unkown\";\n        const { isp: isp } = dataRes;\n        $06e535a9183db766$var$ipText.textContent = $06e535a9183db766$var$ip;\n        $06e535a9183db766$var$cityText.textContent = city;\n        $06e535a9183db766$var$regionText.textContent = region + \" \";\n        $06e535a9183db766$var$countryText.textContent = countryName;\n        $06e535a9183db766$var$utcText.textContent = timezone;\n        $06e535a9183db766$var$flagImg.src = countryFlag;\n        $06e535a9183db766$var$ispText.textContent = isp;\n        $06e535a9183db766$var$displayMap(lat, lng);\n    } catch (err) {\n        alert(\"Invalid IP address or domain!\");\n        console.log(err);\n    } finally{\n        $06e535a9183db766$var$spinner.classList.add(\"hidden\");\n    }\n}\n//Handles form input submission\n$06e535a9183db766$var$form.addEventListener(\"submit\", (e)=>{\n    e.preventDefault();\n    const input = document.querySelector(\".header__input\").value;\n    if (/\\d+\\.\\d+/.test(input)) $06e535a9183db766$var$renderLocation(\"ipAddress\", input);\n    else $06e535a9183db766$var$renderLocation(\"domain\", input);\n});\n// Display Map\nfunction $06e535a9183db766$var$displayMap(lat, lon) {\n    $06e535a9183db766$var$map.setView([\n        lat,\n        lon\n    ], 18);\n    L.tileLayer(\"https://tile.openstreetmap.org/{z}/{x}/{y}.png\", {\n        attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n    }).addTo($06e535a9183db766$var$map);\n    L.marker([\n        lat,\n        lon\n    ]).addTo($06e535a9183db766$var$map);\n}\n//Give country info\nasync function $06e535a9183db766$var$countryInfo(code) {\n    try {\n        const data = await fetch(`https://restcountries.com/v3.1/alpha/${code}`).then((res)=>res.json());\n        return {\n            name: data[0].name.common,\n            flag: data[0].flags.png\n        };\n    } catch (err) {\n        alert(\"invalid Ip Address or domain\");\n    }\n}\n\n\n//# sourceMappingURL=index.faaabe0c.js.map\n","// console.log(iconLocation);\r\n// App Variables\r\nconst ipText = document.querySelector(\"#ip\");\r\nconst cityText = document.querySelector(\"#city\");\r\nconst regionText = document.querySelector(\"#region\");\r\nconst countryText = document.querySelector(\"#country\");\r\nconst flagImg = document.querySelector(\".result__flag-image\");\r\nconst ispText = document.querySelector(\".isp\");\r\nconst utcText = document.querySelector(\".utc\");\r\nconst spinner = document.querySelector(\".spinner\");\r\n\r\nconst formBtn = document.querySelector(\".header__btn\");\r\nconst form = document.querySelector(\".header__form\");\r\n\r\n// Map variables\r\nconst map = L.map(\"map\").setView([51, -0.09], 18);\r\n\r\n// Get Local IP Address\r\nspinner.classList.remove(\"hidden\");\r\nconst resIp = await fetch(`https://api.ipify.org?format=json`);\r\nconst { ip } = await resIp.json();\r\nif (ip) {\r\n  renderLocation(\"ipAddress\", ip);\r\n} else {\r\n  spinner.classList.add(\"hidden\");\r\n}\r\n// Get IP, Location, Timezone, ISP\r\nasync function renderLocation(type, data) {\r\n  spinner.classList.remove(\"hidden\");\r\n  try {\r\n    const dataRes = await (\r\n      await fetch(\r\n        `https://geo.ipify.org/api/v2/country,city?apiKey=at_pMCkCpy23Goiw8MsZZYF588QVkRuK&${type}=${data}`\r\n      )\r\n    ).json();\r\n\r\n    const { lat, lng, city, region, country, timezone } = dataRes.location;\r\n    const countryData = await fetch(\r\n      `https://restcountries.com/v3.1/alpha/${country}`\r\n    ).then(res => res.json());\r\n\r\n    const countryName = countryData[0].name.common || \"Unkown\";\r\n    const countryFlag = countryData[0].flags.png || \"Unkown\";\r\n    const { isp } = dataRes;\r\n\r\n    ipText.textContent = ip;\r\n    cityText.textContent = city;\r\n    regionText.textContent = region + \" \";\r\n    countryText.textContent = countryName;\r\n    utcText.textContent = timezone;\r\n    flagImg.src = countryFlag;\r\n\r\n    ispText.textContent = isp;\r\n    displayMap(lat, lng);\r\n  } catch (err) {\r\n    alert(\"Invalid IP address or domain!\");\r\n    console.log(err);\r\n  } finally {\r\n    spinner.classList.add(\"hidden\");\r\n  }\r\n}\r\n\r\n//Handles form input submission\r\nform.addEventListener(\"submit\", e => {\r\n  e.preventDefault();\r\n  const input = document.querySelector(\".header__input\").value;\r\n  if (/\\d+\\.\\d+/.test(input)) {\r\n    renderLocation(\"ipAddress\", input);\r\n  } else {\r\n    renderLocation(\"domain\", input);\r\n  }\r\n});\r\n\r\n// Display Map\r\nfunction displayMap(lat, lon) {\r\n  map.setView([lat, lon], 18);\r\n  L.tileLayer(\"https://tile.openstreetmap.org/{z}/{x}/{y}.png\", {\r\n    attribution:\r\n      '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\r\n  }).addTo(map);\r\n\r\n  L.marker([lat, lon]).addTo(map);\r\n}\r\n\r\n//Give country info\r\nasync function countryInfo(code) {\r\n  try {\r\n    const data = await fetch(\r\n      `https://restcountries.com/v3.1/alpha/${code}`\r\n    ).then(res => res.json());\r\n    return {\r\n      name: data[0].name.common,\r\n      flag: data[0].flags.png,\r\n    };\r\n  } catch (err) {\r\n    alert(\"invalid Ip Address or domain\");\r\n  }\r\n}\r\n"],"names":["$06e535a9183db766$var$ipText","document","querySelector","$06e535a9183db766$var$cityText","$06e535a9183db766$var$regionText","$06e535a9183db766$var$countryText","$06e535a9183db766$var$flagImg","$06e535a9183db766$var$ispText","$06e535a9183db766$var$utcText","$06e535a9183db766$var$spinner","$06e535a9183db766$var$form","$06e535a9183db766$var$map","L","map","setView","classList","remove","$06e535a9183db766$var$resIp","fetch","ip","$06e535a9183db766$var$ip","json","$06e535a9183db766$var$renderLocation","type","data","dataRes","lat","lng","city","region","country","timezone","location","countryData","then","res","countryName","name","common","countryFlag","flags","png","isp","textContent","src","tileLayer","attribution","addTo","marker","err","alert","console","log","add","addEventListener","e","preventDefault","input","value","test"],"version":3,"file":"index.faaabe0c.js.map"}